# Generated by Selenium IDE
import pytest
import time
import json
import pandas as pd
import random
import sys

from webdriver_manager.chrome import ChromeDriverManager
from webdriver_manager.microsoft import EdgeChromiumDriverManager
from webdriver_manager.firefox import GeckoDriverManager

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities


class DDT():

  def Set_Browser(self, browserName):
    print('browserName: %s' % browserName)
    if browserName == 'edge':
      self.driver = webdriver.Edge(EdgeChromiumDriverManager().install())
    elif browserName == 'firefox':
      self.driver = webdriver.Firefox(GeckoDriverManager().install())
    else:
      self.driver = webdriver.Chrome(ChromeDriverManager().install())

  def Login(self):

    self.driver.get(
        "https://opensource-demo.orangehrmlive.com/web/index.php/auth/login")

    self.driver.set_window_size(1600, 900)

    time.sleep(3)

    self.driver.find_element(By.NAME, "username").click()

    self.driver.find_element(By.NAME, "username").send_keys("Admin")

    self.driver.find_element(By.NAME, "password").click()

    self.driver.find_element(By.NAME, "password").send_keys("admin123")

    self.driver.find_element(
      By.XPATH, "//*[@id=\"app\"]/div[1]/div/div[1]/div/div[2]/div[2]/form/div[3]/button").click()

  def Logout(self):
    self.driver.find_element(
        By.XPATH, "//div[@id=\'app\']/div/div/header/div/div[2]/ul/li/span/i").click()

    time.sleep(0.5)

    self.driver.find_element(By.LINK_TEXT, "Logout").click()

    time.sleep(2)

    WebDriverWait(self.driver, 3).until(
        expected_conditions.presence_of_element_located((By.XPATH, "//*[@id=\"app\"]/div[1]/div/div[1]/div/div[2]/h5")))

  def DDT_Admin_UserManagement_Search(self):
    def Go_To_Admin():
      time.sleep(1)
      WebDriverWait(self.driver, 5).until(
          expected_conditions.presence_of_element_located((By.LINK_TEXT, "Admin")))
      self.driver.find_element(By.LINK_TEXT, "Admin").click()

    def Input_Employee_Name(name):
      self.driver.find_element(
        By.XPATH, "//*[@id=\"app\"]/div[1]/div[2]/div[2]/div/div[1]/div[2]/form/div[1]/div/div[3]/div/div[2]/div/div/input").send_keys("Kevin  " if name == "Kevin  Mathews" else name)

      time.sleep(2)
      WebDriverWait(self.driver, 10).until(expected_conditions.presence_of_element_located(
        (By.XPATH, "//*[@id=\"app\"]/div[1]/div[2]/div[2]/div/div[1]/div[2]/form/div[1]/div/div[3]/div/div[2]/div/div[2]/div")))

      self.driver.find_element(
          By.XPATH, "//*[@id=\"app\"]/div[1]/div[2]/div[2]/div/div[1]/div[2]/form/div[1]/div/div[3]/div/div[2]/div/div[2]/div").click()

    def Input_Username(self, username):
      self.driver.find_element(
        By.XPATH, "//*[@id=\"app\"]/div[1]/div[2]/div[2]/div/div[1]/div[2]/form/div[1]/div/div[1]/div/div[2]/input").click()
      self.driver.find_element(
        By.XPATH, "//*[@id=\"app\"]/div[1]/div[2]/div[2]/div/div[1]/div[2]/form/div[1]/div/div[1]/div/div[2]/input").send_keys(username)

    def Choose_Status(status):
      self.driver.find_element(
        By.XPATH, "//*[@id=\"app\"]/div[1]/div[2]/div[2]/div/div[1]/div[2]/form/div[1]/div/div[4]/div/div[2]/div/div/div[2]").click()
      time.sleep(1)
      if status == "Enabled":
        self.driver.find_element(
          By.XPATH, "//*[@id=\"app\"]/div[1]/div[2]/div[2]/div/div[1]/div[2]/form/div[1]/div/div[4]/div/div[2]/div/div[2]/div[2]").click()
      if status == "Disabled":
        self.driver.find_element(
          By.XPATH, "//*[@id=\"app\"]/div[1]/div[2]/div[2]/div/div[1]/div[2]/form/div[1]/div/div[4]/div/div[2]/div/div[2]/div[3]").click()

    def Choose_Role(role):
      self.driver.find_element(
        By.XPATH, "//*[@id=\"app\"]/div[1]/div[2]/div[2]/div/div[1]/div[2]/form/div[1]/div/div[2]/div/div[2]/div/div/div[2]").click()
      time.sleep(1)
      if role == "Admin":
        self.driver.find_element(
          By.XPATH, "//*[@id=\"app\"]/div[1]/div[2]/div[2]/div/div[1]/div[2]/form/div[1]/div/div[2]/div/div[2]/div/div[2]/div[2]").click()
      if role == "ESS":
        self.driver.find_element(
          By.XPATH, "//*[@id=\"app\"]/div[1]/div[2]/div[2]/div/div[1]/div[2]/form/div[1]/div/div[2]/div/div[2]/div/div[2]/div[3]").click()

    def Verify(name="", role="", status=""):
      time.sleep(0.5)
      # WebDriverWait(self.driver, 10).until(expected_conditions.presence_of_element_located(
      #   (By.CSS_SELECTOR, ".oxd-table-cell:nth-child(4) > div")))

      # if name != "":
      #   assert self.driver.find_element(
      #     By.CSS_SELECTOR, ".oxd-table-cell:nth-child(4) > div").text == "Kevin Mathews"

    df = pd.read_csv("data1.csv", keep_default_na=False)
    result = []

    for index, row in df.iterrows():
      try:
        self.Set_Browser(random.choice(["edge", 'firefox', 'chrome']))

        self.Login()

        Go_To_Admin()

        WebDriverWait(self.driver, 30).until(expected_conditions.text_to_be_present_in_element(
          (By.CSS_SELECTOR, ".oxd-text--h5"), "System Users"))

        name = ""
        if row["Employee Name"] != "":
          name = row["Employee Name"]
          name = name[1:len(name) - 1]
          Input_Employee_Name(name)

        username = ""
        if row["Username"] != "":
          username = row["Username"]
          username = username[1:len(username) - 1]
          Input_Username(username)

        Choose_Status(row["Status"])

        Choose_Role(row['User Role'])

        self.driver.find_element(
            By.XPATH, "//*[@id=\"app\"]/div[1]/div[2]/div[2]/div/div[1]/div[2]/form/div[2]/button[2]").click()

        Verify(name, row['User Role'], row["Status"])

        self.Logout()

        result.append("PASSED")
      except:
        result.append("FAILED")

    print("DDT_Admin_UserManagement_Search test results: ", result)

  def DDT_Admin_PerformanceReview_Search(self):
    def Go_To_Performance():
      time.sleep(0.5)
      self.driver.get(
       "https://opensource-demo.orangehrmlive.com/web/index.php/performance/searchPerformanceReview")
      time.sleep(1.5)

    def Input_Employee_Name(name):
      self.driver.find_element(
        By.XPATH, "//*[@id=\"app\"]/div[1]/div[2]/div[2]/div/div[1]/div[2]/form/div[1]/div[1]/div/div[2]/div/div/input").send_keys("Kevin  " if name == "Kevin  Mathews" else name)

      time.sleep(2)
      WebDriverWait(self.driver, 10).until(expected_conditions.presence_of_element_located(
        (By.XPATH, "//*[@id=\"app\"]/div[1]/div[2]/div[2]/div/div[1]/div[2]/form/div[1]/div[1]/div/div[2]/div/div[2]/div")))

      self.driver.find_element(
         By.XPATH, "//*[@id=\"app\"]/div[1]/div[2]/div[2]/div/div[1]/div[2]/form/div[1]/div[1]/div/div[2]/div/div[2]/div").click()

    def Input_Date_From(date):
      self.driver.find_element(
        By.XPATH, "//*[@id=\"app\"]/div[1]/div[2]/div[2]/div/div[1]/div[2]/form/div[1]/div[6]/div/div[2]/div/div/input").send_keys(date)

    def Input_Date_To(date):
      self.driver.find_element(
        By.XPATH, "//*[@id=\"app\"]/div[1]/div[2]/div[2]/div/div[1]/div[2]/form/div[1]/div[7]/div/div[2]/div/div/input").send_keys(date)

    def Choose_Title_AccountAsistant():
      self.driver.find_element(
        By.XPATH, "//*[@id=\"app\"]/div[1]/div[2]/div[2]/div/div[1]/div[2]/form/div[1]/div[2]/div/div[2]/div/div/div[2]").click()
      time.sleep(1)
      self.driver.find_element(
        By.XPATH, "//*[@id=\"app\"]/div[1]/div[2]/div[2]/div/div[1]/div[2]/form/div[1]/div[2]/div/div[2]/div/div[2]/div[25]").click()

    def Choose_ReviewStatus_Inprogess():
      self.driver.find_element(
        By.XPATH, "//*[@id=\"app\"]/div[1]/div[2]/div[2]/div/div[1]/div[2]/form/div[1]/div[3]/div/div[2]/div/div/div[2]").click()
      time.sleep(1)
      self.driver.find_element(
        By.XPATH, "//*[@id=\"app\"]/div[1]/div[2]/div[2]/div/div[1]/div[2]/form/div[1]/div[3]/div/div[2]/div/div[2]/div[4]").click()

    def Choose_Include_CurrentEmployee():
      self.driver.find_element(
        By.XPATH, "//*[@id=\"app\"]/div[1]/div[2]/div[2]/div/div[1]/div[2]/form/div[1]/div[4]/div/div[2]/div/div/div[2]").click()
      time.sleep(1)
      self.driver.find_element(
        By.XPATH, "//*[@id=\"app\"]/div[1]/div[2]/div[2]/div/div[1]/div[2]/form/div[1]/div[4]/div/div[2]/div/div[2]/div[1]").click()

    def Verify():
      time.sleep(0.5)

    df = pd.read_csv("data2.csv", keep_default_na=False)
    result = []

    for index, row in df.iterrows():
      try:
        self.Set_Browser(random.choice(["edge", 'firefox', 'chrome']))

        self.Login()

        Go_To_Performance()
        print('data: ', row["Employee Name"],
              row["Job Title"], row["Review Status"], row["Include"], row["From Date"],
              row["To Date"])
        name = ""
        if row["Employee Name"] != "":
          name = row["Employee Name"]
          name = name[1:len(name) - 1]
          Input_Employee_Name(name)
          time.sleep(0.5)

        if row["Job Title"] != "Not selecting":
          Choose_Title_AccountAsistant()
          time.sleep(0.5)

        if row["Review Status"] != "Not selecting":
          Choose_ReviewStatus_Inprogess()
          time.sleep(0.5)

        if row["Include"] != "Not selecting":
          Choose_Include_CurrentEmployee()
          time.sleep(0.5)

        if row["From Date"] != "Not selecting":
          Input_Date_From(row["From Date"])
          time.sleep(0.5)

        if row["To Date"] != "Not selecting":
          Input_Date_To(row["To Date"])
          time.sleep(0.5)

        self.driver.find_element(
            By.XPATH, "//*[@id=\"app\"]/div[1]/div[2]/div[2]/div/div[1]/div[2]/form/div[2]/button[2]").click()

        time.sleep(0.5)

        Verify()

        self.Logout()

        result.append("PASSED")
      except Exception as e:
        print("Error encountered: %s" % e)
        result.append("FAILED")

    print("DDT_Admin_PerformanceReview_Search test results: ", result)


ddt = DDT()
if sys.argv[1] == "user":
  ddt.DDT_Admin_UserManagement_Search()
if sys.argv[1] == "performance":
  ddt.DDT_Admin_PerformanceReview_Search()
